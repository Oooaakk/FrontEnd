{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router\";\nconst request = axios.create({\n  baseURL: \"https://moivehub-itproject-team004.herokuapp.com\",\n  timeout: 5000\n}); // 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\n// const whiteUrls = [\"/user/login\", '/user/register']\n// // request 拦截器\n// // 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//   config.headers['Content-Type'] = 'application/json;charset=utf-8'\n//   // 取出sessionStorage里面缓存的用户信息\n//   let userJson = sessionStorage.getItem(\"user\")\n//   if (!whiteUrls.includes(config.url)) {  // 校验请求白名单\n//     if (!userJson) {\n//       router.push(\"/moviehub/loginpage\")\n//     } else {\n//       let user = JSON.parse(userJson)\n//       config.headers['token'] = user.token  // 设置请求头\n//     }\n//   }\n//   return config\n// }, error => {\n//   return Promise.reject(error)\n// })\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//   response => {\n//     let res = response.data\n//     // 如果是返回的文件\n//     if (response.config.responseType === 'blob') {\n//       return res\n//     }\n//     // 兼容服务端返回的字符串数据\n//     if (typeof res === 'string') {\n//       res = res ? JSON.parse(res) : res\n//     }\n//     // 验证token\n//     if (res.code === '401') {\n//       console.error(\"token过期，重新登录\")\n//       router.push(\"/moveihub/loginpage\")\n//     }\n//     return res\n//   },\n//   error => {\n//     console.log('err' + error) // for debug\n//     return Promise.reject(error)\n//   }\n// )\n// export default request","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout"],"sources":["D:/comp30022 frontend/comp30022-movie-review-website/moviehub_frontend/src/utils/RequestFile.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\"\r\n\r\nconst request = axios.create({\r\n  baseURL: \"https://moivehub-itproject-team004.herokuapp.com\",\r\n  timeout: 5000\r\n})\r\n\r\n// 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\r\n// const whiteUrls = [\"/user/login\", '/user/register']\r\n\r\n// // request 拦截器\r\n// // 可以自请求发送前对请求做一些处理\r\n// // 比如统一加token，对请求参数统一加密\r\n// request.interceptors.request.use(config => {\r\n//   config.headers['Content-Type'] = 'application/json;charset=utf-8'\r\n\r\n//   // 取出sessionStorage里面缓存的用户信息\r\n//   let userJson = sessionStorage.getItem(\"user\")\r\n//   if (!whiteUrls.includes(config.url)) {  // 校验请求白名单\r\n//     if (!userJson) {\r\n//       router.push(\"/moviehub/loginpage\")\r\n//     } else {\r\n//       let user = JSON.parse(userJson)\r\n//       config.headers['token'] = user.token  // 设置请求头\r\n//     }\r\n//   }\r\n//   return config\r\n// }, error => {\r\n//   return Promise.reject(error)\r\n// })\r\n\r\n// // response 拦截器\r\n// // 可以在接口响应后统一处理结果\r\n// request.interceptors.response.use(\r\n//   response => {\r\n//     let res = response.data\r\n//     // 如果是返回的文件\r\n//     if (response.config.responseType === 'blob') {\r\n//       return res\r\n//     }\r\n//     // 兼容服务端返回的字符串数据\r\n//     if (typeof res === 'string') {\r\n//       res = res ? JSON.parse(res) : res\r\n//     }\r\n//     // 验证token\r\n//     if (res.code === '401') {\r\n//       console.error(\"token过期，重新登录\")\r\n//       router.push(\"/moveihub/loginpage\")\r\n//     }\r\n//     return res\r\n//   },\r\n//   error => {\r\n//     console.log('err' + error) // for debug\r\n//     return Promise.reject(error)\r\n//   }\r\n// )\r\n\r\n\r\n// export default request"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EAC3BC,OAAO,EAAE,kDADkB;EAE3BC,OAAO,EAAE;AAFkB,CAAb,CAAhB,C,CAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA"},"metadata":{},"sourceType":"module"}