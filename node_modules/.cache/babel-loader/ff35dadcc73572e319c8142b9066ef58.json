{"ast":null,"code":"import axios from 'axios';\nimport router from \"@/router\";\nconst request = axios.create({\n  baseURL: \"api\",\n  timeout: 5000\n}); // 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\n\nconst whiteUrls = [\"/user/login\", '/user/register']; // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // 取出sessionStorage里面缓存的用户信息\n\n  let userJson = sessionStorage.getItem(\"user\");\n\n  if (!whiteUrls.includes(config.url)) {\n    // 校验请求白名单\n    if (!userJson) {\n      router.push(\"/moviehub/loginpage\");\n    } else {\n      let user = JSON.parse(userJson);\n      config.headers['token'] = user.token; // 设置请求头\n    }\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === 'blob') {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  } // 验证token\n\n\n  if (res.code === '401') {\n    console.error(\"token过期，重新登录\");\n    router.push(\"/moveihub/loginpage\");\n  }\n\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","router","request","create","baseURL","timeout","whiteUrls","interceptors","use","config","headers","userJson","sessionStorage","getItem","includes","url","push","user","JSON","parse","token","error","Promise","reject","response","res","data","responseType","code","console","log"],"sources":["D:/comp30022 frontend/comp30022-movie-review-website/moviehub_frontend/src/utils/RequestFile.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\"\r\n\r\nconst request = axios.create({\r\n  baseURL: \"api\",\r\n  timeout: 5000\r\n})\r\n\r\n// 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\r\nconst whiteUrls = [\"/user/login\", '/user/register']\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'\r\n\r\n  // 取出sessionStorage里面缓存的用户信息\r\n  let userJson = sessionStorage.getItem(\"user\")\r\n  if (!whiteUrls.includes(config.url)) {  // 校验请求白名单\r\n    if (!userJson) {\r\n      router.push(\"/moviehub/loginpage\")\r\n    } else {\r\n      let user = JSON.parse(userJson)\r\n      config.headers['token'] = user.token  // 设置请求头\r\n    }\r\n  }\r\n  return config\r\n}, error => {\r\n  return Promise.reject(error)\r\n})\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n  response => {\r\n    let res = response.data\r\n    // 如果是返回的文件\r\n    if (response.config.responseType === 'blob') {\r\n      return res\r\n    }\r\n    // 兼容服务端返回的字符串数据\r\n    if (typeof res === 'string') {\r\n      res = res ? JSON.parse(res) : res\r\n    }\r\n    // 验证token\r\n    if (res.code === '401') {\r\n      console.error(\"token过期，重新登录\")\r\n      router.push(\"/moveihub/loginpage\")\r\n    }\r\n    return res\r\n  },\r\n  error => {\r\n    console.log('err' + error) // for debug\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n\r\nexport default request"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,MAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;EAC3BC,OAAO,EAAE,KADkB;EAE3BC,OAAO,EAAE;AAFkB,CAAb,CAAhB,C,CAKA;;AACA,MAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,gBAAhB,CAAlB,C,CAEA;AACA;AACA;;AACAJ,OAAO,CAACK,YAAR,CAAqBL,OAArB,CAA6BM,GAA7B,CAAiCC,MAAM,IAAI;EACzCA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADyC,CAGzC;;EACA,IAAIC,QAAQ,GAAGC,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAf;;EACA,IAAI,CAACP,SAAS,CAACQ,QAAV,CAAmBL,MAAM,CAACM,GAA1B,CAAL,EAAqC;IAAG;IACtC,IAAI,CAACJ,QAAL,EAAe;MACbV,MAAM,CAACe,IAAP,CAAY,qBAAZ;IACD,CAFD,MAEO;MACL,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWR,QAAX,CAAX;MACAF,MAAM,CAACC,OAAP,CAAe,OAAf,IAA0BO,IAAI,CAACG,KAA/B,CAFK,CAEiC;IACvC;EACF;;EACD,OAAOX,MAAP;AACD,CAdD,EAcGY,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAhBD,E,CAkBA;AACA;;AACAnB,OAAO,CAACK,YAAR,CAAqBiB,QAArB,CAA8BhB,GAA9B,CACEgB,QAAQ,IAAI;EACV,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADU,CAEV;;EACA,IAAIF,QAAQ,CAACf,MAAT,CAAgBkB,YAAhB,KAAiC,MAArC,EAA6C;IAC3C,OAAOF,GAAP;EACD,CALS,CAMV;;;EACA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IAC3BA,GAAG,GAAGA,GAAG,GAAGP,IAAI,CAACC,KAAL,CAAWM,GAAX,CAAH,GAAqBA,GAA9B;EACD,CATS,CAUV;;;EACA,IAAIA,GAAG,CAACG,IAAJ,KAAa,KAAjB,EAAwB;IACtBC,OAAO,CAACR,KAAR,CAAc,cAAd;IACApB,MAAM,CAACe,IAAP,CAAY,qBAAZ;EACD;;EACD,OAAOS,GAAP;AACD,CAjBH,EAkBEJ,KAAK,IAAI;EACPQ,OAAO,CAACC,GAAR,CAAY,QAAQT,KAApB,EADO,CACoB;;EAC3B,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CArBH;AAyBA,eAAenB,OAAf"},"metadata":{},"sourceType":"module"}